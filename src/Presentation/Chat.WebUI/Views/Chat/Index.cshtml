@using Chat.Application.Common.Extensions
@model List<ChatListDto>
@{
    ViewData["Title"] = "Home Page";
    Layout = "_Layout";
    var currentUserId = Context.User.GetCurrentUserId<AppUser>();
}

<div class="row">
    <div class="chat-list col-lg-3">
        <div>
            <div>
                <div class="row py-3 search-li">
                    <div>
                        <input type="text" class="user-search" placeholder="Search">
                    </div>
                    <div></div>
                </div>
            </div>
            <ul class="ul">

                @if (Model is not  null)
                {
                    foreach (var chatList in Model)
                    {
                        <partial name="Chat/_ChatListPartial" model="chatList"/>
                    }
                }
            </ul>
        </div>
    </div>
    <div class="chat-body col-lg-9 ps-0 overflow-scroll" id="chat-body">
        <input type="hidden" id="correspondedUserId">
        <input type="hidden" id="commonChatListId">
        <div class="current-user-info d-flex p-2 bg-white-blue-grey" id="current-user-info">
            <div class="current-profile">
                <img class="current-profile-img" src="https://cdn-icons-png.flaticon.com/512/64/64572.png">
            </div>
            <div class="ms-3 current-ls-fll-nm">
                <div class="current-full-name">
                    <span class="current-full-name-text text-white">FullName</span>
                </div>
                <div class="">
                    <span class="text-blur last-seen">recently seen</span>
                </div>
            </div>
        </div>
        <div class="message-body py-3 px-4 pb-10">

        </div>
        <div class="d-flex position-fixed bottom-0 w-100" id="send-message-div">
            <div class="d-grid write-message">
                <input type="text" placeholder="Write a message" id="message-input" class="px-4 py-2 border-0 bg-white-blue-grey">
            </div>
            <div class="d-grid send-message">
                <button class="send-message-btn">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24"><path fill-rule="evenodd" d="M1.513 1.96a1.374 1.374 0 011.499-.21l19.335 9.215a1.146 1.146 0 010 2.07L3.012 22.25a1.374 1.374 0 01-1.947-1.46L2.49 12 1.065 3.21a1.374 1.374 0 01.448-1.25zm2.375 10.79l-1.304 8.042L21.031 12 2.584 3.208l1.304 8.042h7.362a.75.75 0 010 1.5H3.888z"></path></svg>
                </button>
            </div>
        </div>
    </div>
</div>


@section Styles
{
    <environment names="Production, Development, Staging">
        <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css"/>
        <link rel="stylesheet" href="~/css/home.css">
    </environment>
}

@section Scripts
{
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script >
    
        const meHtml = '<div class="text-end my-2"><div class="d-inline-block px-2 py-1 me-message">token</div></div>'
                       
        const clientHtml = '<div class="text-white text-start my-2"><div class="d-inline-block px-2 py-1 client-message">token</div></div>'
    
        const hubConnection = new signalR.HubConnectionBuilder().withUrl("/chat").build();
        
        function onLoad() {
            $("#current-user-info").attr("style", "display:none !important");
            $("#send-message-div").attr("style", "display:none !important");
        }
        
        onLoad()
            
        function getUserChatMessages(chatListId){
           $.ajax({
                type: "GET",
                dataType: 'json',
                url: "/Chat/GetUserChatMessages/"+chatListId,
                success: function(msg)
                {
                    handleUserMessages(msg);
                },
                error: function(msg)
                {
                    //doSomethingMoreClever();
                },
           });
        }
        
        function handleUserMessages(messages){
            $(".message-body").empty();
            messages.forEach((response) => {
                if ("@currentUserId" === response.fromUserId)
                {
                    if(response.textMessage !== null && response.textMessage.trim() !== ""){
                         const html = meHtml.replace("token", response.textMessage)
                         $(".message-body").append(html);
                    }
                }
                else{
                    if(response.textMessage !== null && response.textMessage.trim() !== ""){
                         const html = clientHtml.replace("token", response.textMessage)
                         $(".message-body").append(html);
                    }            
                }
                // $("#correspondedUserId").val(response.toUserId);
                $("#commonChatListId").val(response.commonChatListId);
            })
        }
        
        function sendMessage(message){
            $.ajax({
                type: "POST",
                dataType: 'json',
                contentType: 'application/json; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
                url: '/Chat/SendMessage',
                data: JSON.stringify(message),
                success: function(msg)
                {
                    handlerSendMessageResponse(msg.userId, msg.commonChatListId)
                    const html = meHtml.replace("token", message.TextMessage)
                    $(".message-body").append(html);
                },
                error: function(msg)
                {
                    //doSomethingMoreClever();
                },
            });
        }
        
        function searchUsers(userNameOrEmail){
            $.ajax({
                type: "GET",
                url: "/User/SearchUsers?userNameOrEmail="+userNameOrEmail,
                success: function(msg)
                {
                    $(".ul").html(msg)
                },
                error: function(error)
                {
                    console.log(error)
                },
           });            
        }
        
        function copyUserInfo(){
            const fullName = $(".full-name-text").html();
            const corrUId = $("#userId").val();
            console.log("corrUId: "+corrUId);
           $("#commonChatListId").val($("#chatListId").val())
           $("#correspondedUserId").val(corrUId)
           $(".current-full-name-text").html(fullName)
           $("#current-user-info").attr("style", "display:flex !important");
           $("#send-message-div").attr("style", "display:flex !important");
        }
        
        function handlerSendMessageResponse(userId, commonChatListId){
             $(`input[value=${userId}]`).siblings("#chatListId").val(commonChatListId)
        }
        
        function scrollToBottom() {
            let element = document.getElementById("chat-body");
            element.scrollTop = element.scrollHeight;
            console.log("element.scrollHeight;"+element.scrollHeight)
        }
        
        $(".user-search").on("input", function (){
            const userNameOrEmail = $(this).val();
            searchUsers(userNameOrEmail)
        })
    
    
       $(".send-message-btn").click(function (){
           const input_message = $("#message-input");
           const message = input_message.val()
           input_message.val('');
           const toUserId = $("#correspondedUserId").val()
           const commonChatListId = $("#commonChatListId").val();
           const obj = {
               ToUserId: toUserId,
               TextMessage: message,
               CommonChatListId: commonChatListId
           }
           sendMessage(obj);
           scrollToBottom();
       })
     
       $(document).on("click",".chat-list-li", async function (){
           copyUserInfo();
           const chatListId = $(this).children("#chatListId").val()
       
           getUserChatMessages(chatListId);
           setTimeout(()=>{
               scrollToBottom();
           },900)       
       })

        
        hubConnection.on("ReceiveMessage", function(data) { 
            const html = clientHtml.replace("token", data)
            const toUserId = $("#correspondedUserId").val()
            if (toUserId !== 'undefined' && toUserId !== null && toUserId !== ""){
                $(".message-body").append(html);
                scrollToBottom();
            }
        })
        
        hubConnection.start();
    </script>
}
